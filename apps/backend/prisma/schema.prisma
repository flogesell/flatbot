// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String    @id @unique @default(uuid())
  firstName     String?
  lastName      String?
  nickname      String
  email         String    @unique
  password      String
  phoneNumber   String?
  ownerOf       Flat?     @relation("owner")
  flatId        String?
  flat          Flat?     @relation(fields: [flatId], references: [flatId])
  paidFor       Expense[] @relation("paidBy")
  otherExpenses Expense[]
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())

  @@map("users")
}

model Flat {
  flatId    String    @id @unique @default(uuid())
  name      String
  owner     User?     @relation("owner", fields: [ownerId], references: [userId])
  ownerId   String?   @unique
  flatmates User[]
  expenses  Expense[]
  tags      Tag[]
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())

  @@map("flats")
}

model Expense {
  expenseId  String    @id @unique @default(uuid())
  date       DateTime
  tag        Tag?      @relation(fields: [tagId], references: [tagId])
  tagId      String?
  amount     Float
  flatId     String
  flat       Flat      @relation(fields: [flatId], references: [flatId])
  paidBy     User      @relation("paidBy", fields: [paidById], references: [userId])
  paidById   String
  expenseFor User[]
  updatedAt  DateTime? @updatedAt
  createdAt  DateTime? @default(now())

  @@map("expenses")
}

model Tag {
  tagId     String    @id @unique @default(uuid())
  name      String
  flatId    String
  flat      Flat      @relation(fields: [flatId], references: [flatId])
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())
  Expense   Expense[]

  @@index([tagId], name: "tagId")
  @@map("tags")
}
